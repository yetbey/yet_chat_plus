create extension if not exists "http" with schema "public" version '1.6';

create extension if not exists "pg_net" with schema "public" version '0.14.0';

create sequence "public"."chats_id_seq";

create sequence "public"."fcm_tokens_id_seq";

create sequence "public"."messages_id_seq";

create sequence "public"."notifications_id_seq";

create sequence "public"."post_comments_id_seq";

create table "public"."Posts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "user_id" uuid not null default auth.uid(),
    "caption" text,
    "image_url" text,
    "likes" bigint default '0'::bigint,
    "liked_profiles" jsonb,
    "comment_count" integer not null default 0
);


create table "public"."Users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "fullName" text,
    "email" text,
    "password" text,
    "phoneNumber" text,
    "image_url" text,
    "UID" uuid,
    "typing_in_chat_id" integer,
    "username" text
);


create table "public"."chats" (
    "id" bigint not null default nextval('chats_id_seq'::regclass),
    "user1_id" uuid not null,
    "user2_id" uuid not null,
    "last_message_id" bigint,
    "updated_at" timestamp with time zone default now(),
    "unread_count" integer not null default 0
);


create table "public"."fcm_tokens" (
    "id" bigint not null default nextval('fcm_tokens_id_seq'::regclass),
    "user_id" uuid not null,
    "token" text not null,
    "device_type" text default 'android'::text,
    "is_active" boolean default true,
    "created_at" timestamp with time zone default now()
);


alter table "public"."fcm_tokens" enable row level security;

create table "public"."followers" (
    "follower_id" uuid not null,
    "following_id" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."messages" (
    "id" bigint not null default nextval('messages_id_seq'::regclass),
    "chat_id" bigint not null,
    "sender_id" uuid not null,
    "receiver_id" uuid not null,
    "content" text not null,
    "is_read" boolean default false,
    "created_at" timestamp with time zone default now(),
    "reply_to_message_id" bigint,
    "type" text not null default 'text'::text,
    "shared_post_id" bigint
);


create table "public"."notifications" (
    "id" bigint not null default nextval('notifications_id_seq'::regclass),
    "user_id" uuid not null,
    "from_user_id" uuid not null,
    "type" text not null,
    "post_id" bigint,
    "is_read" boolean not null default false,
    "created_at" timestamp with time zone not null default now(),
    "chat_id" bigint
);


alter table "public"."notifications" enable row level security;

create table "public"."post_comments" (
    "id" bigint not null default nextval('post_comments_id_seq'::regclass),
    "post_id" bigint not null,
    "user_id" uuid not null,
    "content" text not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."post_likes" (
    "post_id" bigint not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


alter sequence "public"."chats_id_seq" owned by "public"."chats"."id";

alter sequence "public"."fcm_tokens_id_seq" owned by "public"."fcm_tokens"."id";

alter sequence "public"."messages_id_seq" owned by "public"."messages"."id";

alter sequence "public"."notifications_id_seq" owned by "public"."notifications"."id";

alter sequence "public"."post_comments_id_seq" owned by "public"."post_comments"."id";

CREATE UNIQUE INDEX "Posts_pkey" ON public."Posts" USING btree (id);

CREATE UNIQUE INDEX "Users_UID_key" ON public."Users" USING btree ("UID");

CREATE UNIQUE INDEX "Users_pkey" ON public."Users" USING btree (id);

CREATE UNIQUE INDEX "Users_username_key" ON public."Users" USING btree (username);

CREATE UNIQUE INDEX chats_pkey ON public.chats USING btree (id);

CREATE UNIQUE INDEX chats_users_unique ON public.chats USING btree (user1_id, user2_id);

CREATE UNIQUE INDEX fcm_tokens_pkey ON public.fcm_tokens USING btree (id);

CREATE UNIQUE INDEX fcm_tokens_user_id_token_key ON public.fcm_tokens USING btree (user_id, token);

CREATE UNIQUE INDEX followers_pkey ON public.followers USING btree (follower_id, following_id);

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

CREATE UNIQUE INDEX post_comments_pkey ON public.post_comments USING btree (id);

CREATE UNIQUE INDEX post_likes_pkey ON public.post_likes USING btree (post_id, user_id);

alter table "public"."Posts" add constraint "Posts_pkey" PRIMARY KEY using index "Posts_pkey";

alter table "public"."Users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."chats" add constraint "chats_pkey" PRIMARY KEY using index "chats_pkey";

alter table "public"."fcm_tokens" add constraint "fcm_tokens_pkey" PRIMARY KEY using index "fcm_tokens_pkey";

alter table "public"."followers" add constraint "followers_pkey" PRIMARY KEY using index "followers_pkey";

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."post_comments" add constraint "post_comments_pkey" PRIMARY KEY using index "post_comments_pkey";

alter table "public"."post_likes" add constraint "post_likes_pkey" PRIMARY KEY using index "post_likes_pkey";

alter table "public"."Posts" add constraint "Posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."Posts" validate constraint "Posts_user_id_fkey";

alter table "public"."Users" add constraint "Users_UID_fkey" FOREIGN KEY ("UID") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."Users" validate constraint "Users_UID_fkey";

alter table "public"."Users" add constraint "Users_UID_key" UNIQUE using index "Users_UID_key";

alter table "public"."Users" add constraint "Users_username_key" UNIQUE using index "Users_username_key";

alter table "public"."Users" add constraint "username_validation" CHECK ((username ~ '^[a-z0-9_]{3,20}$'::text)) not valid;

alter table "public"."Users" validate constraint "username_validation";

alter table "public"."chats" add constraint "chats_user1_id_fkey" FOREIGN KEY (user1_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."chats" validate constraint "chats_user1_id_fkey";

alter table "public"."chats" add constraint "chats_user2_id_fkey" FOREIGN KEY (user2_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."chats" validate constraint "chats_user2_id_fkey";

alter table "public"."chats" add constraint "chats_users_unique" UNIQUE using index "chats_users_unique";

alter table "public"."fcm_tokens" add constraint "fcm_tokens_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."fcm_tokens" validate constraint "fcm_tokens_user_id_fkey";

alter table "public"."fcm_tokens" add constraint "fcm_tokens_user_id_token_key" UNIQUE using index "fcm_tokens_user_id_token_key";

alter table "public"."followers" add constraint "followers_follower_id_fkey" FOREIGN KEY (follower_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."followers" validate constraint "followers_follower_id_fkey";

alter table "public"."followers" add constraint "followers_following_id_fkey" FOREIGN KEY (following_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."followers" validate constraint "followers_following_id_fkey";

alter table "public"."messages" add constraint "messages_chat_id_fkey" FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_chat_id_fkey";

alter table "public"."messages" add constraint "messages_receiver_id_fkey" FOREIGN KEY (receiver_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_receiver_id_fkey";

alter table "public"."messages" add constraint "messages_reply_to_message_id_fkey" FOREIGN KEY (reply_to_message_id) REFERENCES messages(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_reply_to_message_id_fkey";

alter table "public"."messages" add constraint "messages_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_sender_id_fkey";

alter table "public"."messages" add constraint "messages_shared_post_id_fkey" FOREIGN KEY (shared_post_id) REFERENCES "Posts"(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_shared_post_id_fkey";

alter table "public"."notifications" add constraint "notifications_from_user_id_fkey" FOREIGN KEY (from_user_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_from_user_id_fkey";

alter table "public"."notifications" add constraint "notifications_post_id_fkey" FOREIGN KEY (post_id) REFERENCES "Posts"(id) ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_post_id_fkey";

alter table "public"."notifications" add constraint "notifications_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_user_id_fkey";

alter table "public"."post_comments" add constraint "post_comments_post_id_fkey" FOREIGN KEY (post_id) REFERENCES "Posts"(id) ON DELETE CASCADE not valid;

alter table "public"."post_comments" validate constraint "post_comments_post_id_fkey";

alter table "public"."post_comments" add constraint "post_comments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."post_comments" validate constraint "post_comments_user_id_fkey";

alter table "public"."post_likes" add constraint "post_likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES "Posts"(id) ON DELETE CASCADE not valid;

alter table "public"."post_likes" validate constraint "post_likes_post_id_fkey";

alter table "public"."post_likes" add constraint "post_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "Users"("UID") ON DELETE CASCADE not valid;

alter table "public"."post_likes" validate constraint "post_likes_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_comment_notification()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  post_author_id UUID;
BEGIN
  SELECT user_id INTO post_author_id FROM public."Posts" WHERE id = NEW.post_id;
  IF NEW.user_id <> post_author_id THEN
    INSERT INTO public.notifications(user_id, from_user_id, type, post_id)
    VALUES(post_author_id, NEW.user_id, 'comment', NEW.post_id);
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.create_like_notification()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  post_author_id UUID;
BEGIN
  SELECT user_id INTO post_author_id FROM public."Posts" WHERE id = NEW.post_id;
  IF NEW.user_id <> post_author_id THEN
    INSERT INTO public.notifications(user_id, from_user_id, type, post_id)
    VALUES(post_author_id, NEW.user_id, 'like', NEW.post_id);
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.create_message_notification()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  IF NEW.sender_id <> NEW.receiver_id THEN
    -- INSERT işlemine chat_id'yi ekliyoruz
    INSERT INTO public.notifications(user_id, from_user_id, type, chat_id)
    VALUES(NEW.receiver_id, NEW.sender_id, 'message', NEW.chat_id);
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.create_or_get_chat(user_id_1 uuid, user_id_2 uuid)
 RETURNS bigint
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  chat_id BIGINT;
BEGIN
  -- Mevcut sohbeti ara (her iki yönde de)
  SELECT id INTO chat_id
  FROM public.chats
  WHERE (chats.user1_id = user_id_1 AND chats.user2_id = user_id_2)
     OR (chats.user1_id = user_id_2 AND chats.user2_id = user_id_1);

  -- Eğer sohbet varsa, ID'sini döndür
  IF chat_id IS NOT NULL THEN
    RETURN chat_id;
  END IF;

  -- Eğer sohbet yoksa, yenisini oluştur ve ID'sini döndür
  INSERT INTO public.chats (user1_id, user2_id)
  VALUES (user_id_1, user_id_2)
  RETURNING id INTO chat_id;
  
  RETURN chat_id;
END;
$function$
;

create type "public"."http_header" as ("field" character varying, "value" character varying);

create type "public"."http_request" as ("method" http_method, "uri" character varying, "headers" http_header[], "content_type" character varying, "content" character varying);

create type "public"."http_response" as ("status" integer, "content_type" character varying, "headers" http_header[], "content" character varying);

CREATE OR REPLACE FUNCTION public.manage_follow_notification()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  -- Eğer birisi takip ediyorsa (INSERT işlemi ise)
  IF (TG_OP = 'INSERT') THEN
    -- Kullanıcı kendi kendini takip etmiyorsa bildirim oluştur
    IF NEW.follower_id <> NEW.following_id THEN
      INSERT INTO public.notifications(user_id, from_user_id, type)
      VALUES(NEW.following_id, NEW.follower_id, 'follow');
    END IF;
  
  -- Eğer birisi takipten çıkıyorsa (DELETE işlemi ise)
  ELSIF (TG_OP = 'DELETE') THEN
    -- İlgili 'takip etti' bildirimini bul ve sil
    DELETE FROM public.notifications
    WHERE notifications.user_id = OLD.following_id
      AND notifications.from_user_id = OLD.follower_id
      AND notifications.type = 'follow';
  END IF;
  
  RETURN NULL; -- Trigger için sonuç döndürmeye gerek yok
END;
$function$
;

CREATE OR REPLACE FUNCTION public.trigger_send_push_notification()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  project_url text := 'https://pivqavzpgjartjvywspm.supabase.co';
  -- Projenizin public anon key'ini buraya yapıştırın
  anon_key text := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzc3hmcGZnY3Rha3V0d2Jic3p4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEyOTUxNzAsImV4cCI6MjA1Njg3MTE3MH0.TIQO7BDJqdOUPV0olfQvbHjJ5HTsWFA1BXwclVFyCXU'; 
BEGIN
  -- net.http_post ile Edge Function'a güvenli bir istek gönderiyoruz
  PERFORM net.http_post(
    url := project_url || '/functions/v1/send-push-notification',
    headers := jsonb_build_object(
      'Content-Type', 'application/json',
      'apikey', anon_key -- Yetkilendirme için anon key kullanıyoruz
    ),
    body := jsonb_build_object('record', NEW)
  );
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_post_comment_count()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    UPDATE public."Posts"
    SET comment_count = comment_count + 1
    WHERE id = NEW.post_id;
  ELSIF (TG_OP = 'DELETE') THEN
    UPDATE public."Posts"
    SET comment_count = comment_count - 1
    WHERE id = OLD.post_id;
  END IF;
  RETURN NULL;
END;
$function$
;

grant delete on table "public"."Posts" to "anon";

grant insert on table "public"."Posts" to "anon";

grant references on table "public"."Posts" to "anon";

grant select on table "public"."Posts" to "anon";

grant trigger on table "public"."Posts" to "anon";

grant truncate on table "public"."Posts" to "anon";

grant update on table "public"."Posts" to "anon";

grant delete on table "public"."Posts" to "authenticated";

grant insert on table "public"."Posts" to "authenticated";

grant references on table "public"."Posts" to "authenticated";

grant select on table "public"."Posts" to "authenticated";

grant trigger on table "public"."Posts" to "authenticated";

grant truncate on table "public"."Posts" to "authenticated";

grant update on table "public"."Posts" to "authenticated";

grant delete on table "public"."Posts" to "service_role";

grant insert on table "public"."Posts" to "service_role";

grant references on table "public"."Posts" to "service_role";

grant select on table "public"."Posts" to "service_role";

grant trigger on table "public"."Posts" to "service_role";

grant truncate on table "public"."Posts" to "service_role";

grant update on table "public"."Posts" to "service_role";

grant delete on table "public"."Users" to "anon";

grant insert on table "public"."Users" to "anon";

grant references on table "public"."Users" to "anon";

grant select on table "public"."Users" to "anon";

grant trigger on table "public"."Users" to "anon";

grant truncate on table "public"."Users" to "anon";

grant update on table "public"."Users" to "anon";

grant delete on table "public"."Users" to "authenticated";

grant insert on table "public"."Users" to "authenticated";

grant references on table "public"."Users" to "authenticated";

grant select on table "public"."Users" to "authenticated";

grant trigger on table "public"."Users" to "authenticated";

grant truncate on table "public"."Users" to "authenticated";

grant update on table "public"."Users" to "authenticated";

grant delete on table "public"."Users" to "service_role";

grant insert on table "public"."Users" to "service_role";

grant references on table "public"."Users" to "service_role";

grant select on table "public"."Users" to "service_role";

grant trigger on table "public"."Users" to "service_role";

grant truncate on table "public"."Users" to "service_role";

grant update on table "public"."Users" to "service_role";

grant delete on table "public"."chats" to "anon";

grant insert on table "public"."chats" to "anon";

grant references on table "public"."chats" to "anon";

grant select on table "public"."chats" to "anon";

grant trigger on table "public"."chats" to "anon";

grant truncate on table "public"."chats" to "anon";

grant update on table "public"."chats" to "anon";

grant delete on table "public"."chats" to "authenticated";

grant insert on table "public"."chats" to "authenticated";

grant references on table "public"."chats" to "authenticated";

grant select on table "public"."chats" to "authenticated";

grant trigger on table "public"."chats" to "authenticated";

grant truncate on table "public"."chats" to "authenticated";

grant update on table "public"."chats" to "authenticated";

grant delete on table "public"."chats" to "service_role";

grant insert on table "public"."chats" to "service_role";

grant references on table "public"."chats" to "service_role";

grant select on table "public"."chats" to "service_role";

grant trigger on table "public"."chats" to "service_role";

grant truncate on table "public"."chats" to "service_role";

grant update on table "public"."chats" to "service_role";

grant delete on table "public"."fcm_tokens" to "anon";

grant insert on table "public"."fcm_tokens" to "anon";

grant references on table "public"."fcm_tokens" to "anon";

grant select on table "public"."fcm_tokens" to "anon";

grant trigger on table "public"."fcm_tokens" to "anon";

grant truncate on table "public"."fcm_tokens" to "anon";

grant update on table "public"."fcm_tokens" to "anon";

grant delete on table "public"."fcm_tokens" to "authenticated";

grant insert on table "public"."fcm_tokens" to "authenticated";

grant references on table "public"."fcm_tokens" to "authenticated";

grant select on table "public"."fcm_tokens" to "authenticated";

grant trigger on table "public"."fcm_tokens" to "authenticated";

grant truncate on table "public"."fcm_tokens" to "authenticated";

grant update on table "public"."fcm_tokens" to "authenticated";

grant delete on table "public"."fcm_tokens" to "service_role";

grant insert on table "public"."fcm_tokens" to "service_role";

grant references on table "public"."fcm_tokens" to "service_role";

grant select on table "public"."fcm_tokens" to "service_role";

grant trigger on table "public"."fcm_tokens" to "service_role";

grant truncate on table "public"."fcm_tokens" to "service_role";

grant update on table "public"."fcm_tokens" to "service_role";

grant delete on table "public"."followers" to "anon";

grant insert on table "public"."followers" to "anon";

grant references on table "public"."followers" to "anon";

grant select on table "public"."followers" to "anon";

grant trigger on table "public"."followers" to "anon";

grant truncate on table "public"."followers" to "anon";

grant update on table "public"."followers" to "anon";

grant delete on table "public"."followers" to "authenticated";

grant insert on table "public"."followers" to "authenticated";

grant references on table "public"."followers" to "authenticated";

grant select on table "public"."followers" to "authenticated";

grant trigger on table "public"."followers" to "authenticated";

grant truncate on table "public"."followers" to "authenticated";

grant update on table "public"."followers" to "authenticated";

grant delete on table "public"."followers" to "service_role";

grant insert on table "public"."followers" to "service_role";

grant references on table "public"."followers" to "service_role";

grant select on table "public"."followers" to "service_role";

grant trigger on table "public"."followers" to "service_role";

grant truncate on table "public"."followers" to "service_role";

grant update on table "public"."followers" to "service_role";

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."post_comments" to "anon";

grant insert on table "public"."post_comments" to "anon";

grant references on table "public"."post_comments" to "anon";

grant select on table "public"."post_comments" to "anon";

grant trigger on table "public"."post_comments" to "anon";

grant truncate on table "public"."post_comments" to "anon";

grant update on table "public"."post_comments" to "anon";

grant delete on table "public"."post_comments" to "authenticated";

grant insert on table "public"."post_comments" to "authenticated";

grant references on table "public"."post_comments" to "authenticated";

grant select on table "public"."post_comments" to "authenticated";

grant trigger on table "public"."post_comments" to "authenticated";

grant truncate on table "public"."post_comments" to "authenticated";

grant update on table "public"."post_comments" to "authenticated";

grant delete on table "public"."post_comments" to "service_role";

grant insert on table "public"."post_comments" to "service_role";

grant references on table "public"."post_comments" to "service_role";

grant select on table "public"."post_comments" to "service_role";

grant trigger on table "public"."post_comments" to "service_role";

grant truncate on table "public"."post_comments" to "service_role";

grant update on table "public"."post_comments" to "service_role";

grant delete on table "public"."post_likes" to "anon";

grant insert on table "public"."post_likes" to "anon";

grant references on table "public"."post_likes" to "anon";

grant select on table "public"."post_likes" to "anon";

grant trigger on table "public"."post_likes" to "anon";

grant truncate on table "public"."post_likes" to "anon";

grant update on table "public"."post_likes" to "anon";

grant delete on table "public"."post_likes" to "authenticated";

grant insert on table "public"."post_likes" to "authenticated";

grant references on table "public"."post_likes" to "authenticated";

grant select on table "public"."post_likes" to "authenticated";

grant trigger on table "public"."post_likes" to "authenticated";

grant truncate on table "public"."post_likes" to "authenticated";

grant update on table "public"."post_likes" to "authenticated";

grant delete on table "public"."post_likes" to "service_role";

grant insert on table "public"."post_likes" to "service_role";

grant references on table "public"."post_likes" to "service_role";

grant select on table "public"."post_likes" to "service_role";

grant trigger on table "public"."post_likes" to "service_role";

grant truncate on table "public"."post_likes" to "service_role";

grant update on table "public"."post_likes" to "service_role";

create policy "Kullanıcılar kendi token'larını ekleyebilir"
on "public"."fcm_tokens"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Kullanıcılar kendi token'larını görebilir"
on "public"."fcm_tokens"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Kullanıcılar kendi token'larını güncelleyebilir"
on "public"."fcm_tokens"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Herkes bildirim gönderebilir"
on "public"."notifications"
as permissive
for insert
to public
with check ((auth.uid() = from_user_id));


create policy "Kullanıcılar kendi bildirimlerini görebilir"
on "public"."notifications"
as permissive
for select
to public
using ((auth.uid() = user_id));


CREATE TRIGGER on_follow_change AFTER INSERT OR DELETE ON public.followers FOR EACH ROW EXECUTE FUNCTION manage_follow_notification();

CREATE TRIGGER on_message_created AFTER INSERT ON public.messages FOR EACH ROW EXECUTE FUNCTION create_message_notification();

CREATE TRIGGER on_new_notification AFTER INSERT ON public.notifications FOR EACH ROW EXECUTE FUNCTION trigger_send_push_notification();

CREATE TRIGGER on_comment_change AFTER INSERT OR DELETE ON public.post_comments FOR EACH ROW EXECUTE FUNCTION update_post_comment_count();

CREATE TRIGGER on_new_comment AFTER INSERT ON public.post_comments FOR EACH ROW EXECUTE FUNCTION create_comment_notification();

CREATE TRIGGER on_new_like AFTER INSERT ON public.post_likes FOR EACH ROW EXECUTE FUNCTION create_like_notification();


